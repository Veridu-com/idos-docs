FORMAT: 1A
HOST: https://api.idos.io/1.0/

# idOS - A flexible framework for identity solutions.
Veridu idOS is a [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) framework for flexible Identity Solutions, i.e. it has resource-oriented URLs and uses HTTP response codes to indicate API errors. It also uses built-in HTTP features, like HTTP authentication and HTTP verbs, which are understood by off-the-shelf HTTP clients.

Support for cross-origin resource sharing is available across all endpoints, allowing you to interact securely with the API from a client-side web application (you should never expose your Private Key in any client-side code, use User Tokens or Credential Tokens instead).

To make the API as explorable as possible, API credentials have development and production modes. There is no "switch" for changing between modes, just use the appropriate credential to perform a live or test request. Requests made with test mode credentials incur no costs.


# Overview
This describes the resources that make up the official Veridu idOS API v1.0.

If you have any problems or requests, please contact support at [support@veridu.com](mailto:support@veridu.com).


## Response Envelopes

All API responses are sent inside an envelopes, separating response metadata from response content more elegantly.

### Success Envelope

#### Paginated Response

Field                   | Type    | Description
------------------------|---------|------------
status                  | boolean | Response status flag (set to `true`)
data                    | array   | Response data, array of objects
pagination.total        | integer | Total items available for current query parameters
pagination.per_page     | integer | Number of items per page
pagination.current_page | integer | Current page index
pagination.last_page    | integer | Last page index
pagination.from         | integer | First item index
pagination.to           | integer | Last item index
updated                 | integer | Unix timestamp for last update on result set (optional field)

#### Single Item Response

Field                   | Type    | Description
------------------------|---------|------------
status                  | boolean | Response status flag (set to `true`)
data                    | object  | Response data, object
updated                 | integer | Unix timestamp for last update on result set (optional field)

### Error Envelope

Field         | Type    | Description
--------------|---------|------------
status        | boolean | Response status flag (set to `false`)
error.code    | integer | Same as the HTTP Status Code
error.type    | string  | The type of error returned
error.link    | string  | Link to additional information about the error
error.message | string  | A descriptive error message


## Schema

All API access is over HTTPS, and accessed from the `api.idos.io` domain.

Request data can be sent as `application/x-www-form-urlencoded` or `application/json`.

Response data can be received as `application/json`, `application/javascript` or `application/xml` depending on the `Accept` header.

For JSON-P (`application/javascript`) responses, a `callback` parameter should be added to the Query String.


## Parameters

All API endpoints will accept one or more of the parameters below, added to the Query String.

Parameter    | Type    | Default | Values                           | Description
-------------|---------|---------|----------------------------------|------------
hideLinks    | boolean | `true`  | `true`, `false`                  | Suppress response's links field
failSilently | boolean | `false` | `true`, `false`                  | Forces a `HTTP 200 OK` response on errors
forceOutput  | string  | `empty` | `json`, `javascript` or `xml`    | Overrides `Accept` header and forces response output format
callback     | string  | `jsonp` | a valid javascript function name | Callback function name for JSON-P responses
forcedError  | string  | `empty` | check endpoint's list of errors  | Forces a response error


## Errors

Veridu idOS API uses conventional HTTP response codes to indicate the success or failure of an API request, however not all errors map cleanly onto HTTP response codes.

```bash
curl -i https://api.idos.io/1.0/profiles/myUser
```
```http
HTTP/1.1 403 Forbidden
Server: nginx
Date: Tue, 22 Dec 2015 19:32:37 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 195
Connection: keep-alive
Cache-Control: no-store,no-cache
X-Content-Type-Options: nosniff
```
```json
{
"status": false,
"error": {
"code": 403,
"type": "CREDENTIAL_MISSING",
"link": "https://veridu.com/wiki/CREDENTIAL_MISSING",
"message": "Credential details missing. Valid Credentials: Token, Private Key"
}
}
```

## Authentication

There are two ways to authenticate in Veridu idOS API: based on a User Token or on a Credential Token. Requests that require authentication will return `403 Forbidden`. You can manage your API credentials on the [Dashboard](https://dashboard.idos.io).

All tokens are based on [JSON Web Tokens](), a list of recommended libraries to generate and manage tokens can be found [here](https://jwt.io).

### User Token

This should be used by users to interact with the API. Tokens can have a long time span, perfect for mobile integrations.

#### Sent in a Header

This is the preferred method, as it safely transports the token using a HTTP Header.

```bash
curl -H "Authorization: UserToken TOKEN" https://api.idos.io/1.0/
```

#### Sent as Query String

```bash
curl https://api.idos.io/1.0/?userToken=TOKEN
```

### Credential Token

This should be used by handlers to interact with the API.

#### Sent in a Header

This is the preferred method, as it safely transports the token using a HTTP Header.

```bash
curl -H "Authorization: CredentialToken TOKEN" https://api.idos.io/1.0/
```

#### Sent as Query String

```
curl https://api.idos.io/1.0/?token=TOKEN
```

## Rate Limiting

You can check the returned HTTP headers of any API request to see your current rate limit status:

```bash
curl -i https://api.idos.io/1.0/profiles/myUser?privKey=PRIVATE-KEY
```
```http
HTTP/1.1 200 OK
Server: nginx
Date: Tue, 22 Dec 2015 19:03:10 GMT
X-Rate-Limit-Limit: 5400
X-Rate-Limit-Remaining: 5399
X-Rate-Limit-Reset: 1450814590
```

The headers tell you everything you need to know about your current rate limit status:

Header Name            | Description
-----------------------|------------
X-Rate-Limit-Limit     | The maximum number of requests that the consumer is permitted to make per minute.
X-Rate-Limit-Remaining | The number of requests remaining in the current rate limit window.
X-Rate-Limit-Reset     | The time at which the current rate limit window resets in UTC epoch seconds.

Once you go over the rate limit you will receive an error response:

```http
HTTP/1.1 429 Too Many Requests
Server: nginx
Date: Tue, 22 Dec 2015 19:09:23 GMT
X-Rate-Limit-Limit: 5400
X-Rate-Limit-Remaining: 0
X-Rate-Limit-Reset: 1450814590
```

## Conditional Requests

Most responses return an `ETag` header and many also return a `Last-Modified` header. You can use the values of these headers to make subsequent requests to those resources using the `If-None-Match` and `If-Modified-Since` headers, respectively. If the resource has not changed, the server will return a 304 Not Modified.

```bash
curl -i https://api.idos.io/1.0/profiles/myUser?privKey=PRIVATE-KEY
```
```http
HTTP/1.1 200 OK
Server: nginx
Date: Tue, 22 Dec 2015 19:09:31 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 707
Connection: keep-alive
Vary: Accept-Encoding
X-Rate-Limit-Limit: 5400
X-Rate-Limit-Remaining: 5399
X-Rate-Limit-Reset: 1450814971
Last-Modified: Tue, 22 Dec 2015 19:09:18 GMT
X-Content-Type-Options: nosniff
ETag: W/"079f7567b040b8f83e9d246018d7c115cea24c3a"
Cache-Control: private, no-cache, no-store, max-age=0, must-revalidate
```

```bash
curl -i https://api.idos.io/1.0/profiles/myUser?privKey=PRIVATE-KEY -H 'If-None-Match: W/"079f7567b040b8f83e9d246018d7c115cea24c3a"'
```
```http
HTTP/1.1 304 Not Modified
Server: nginx
Date: Tue, 22 Dec 2015 19:10:12 GMT
Connection: keep-alive
X-Rate-Limit-Limit: 5400
X-Rate-Limit-Remaining: 5398
X-Rate-Limit-Reset: 1450814971
Last-Modified: Tue, 22 Dec 2015 19:09:18 GMT
X-Content-Type-Options: nosniff
ETag: W/"079f7567b040b8f83e9d246018d7c115cea24c3a"
Cache-Control: private, no-cache, no-store, max-age=0, must-revalidate
```

```bash
curl -i https://api.idos.io/1.0/profiles/myUser?privKey=PRIVATE-KEY -H 'If-Modified-Since: Tue, 22 Dec 2015 19:09:18 GMT'
```
```http
HTTP/1.1 304 Not Modified
Server: nginx
Date: Tue, 22 Dec 2015 19:10:36 GMT
Connection: keep-alive
X-Rate-Limit-Limit: 5400
X-Rate-Limit-Remaining: 5397
X-Rate-Limit-Reset: 1450814971
Last-Modified: Tue, 22 Dec 2015 19:09:18 GMT
X-Content-Type-Options: nosniff
ETag: W/"079f7567b040b8f83e9d246018d7c115cea24c3a"
Cache-Control: private, no-cache, no-store, max-age=0, must-revalidate
```


## Cross Origin Resource Sharing

The API supports Cross Origin Resource Sharing (CORS) for AJAX requests from any origin.

```bash
curl -i https://api.idos.io/1.0/profiles/myUser?privKey=PRIVATE-KEY -H 'Origin: http://example.com'
```
```http
HTTP/1.1 200 OK
Server: nginx
Date: Tue, 22 Dec 2015 19:25:00 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 707
Connection: keep-alive
Vary: Accept-Encoding
Access-Control-Allow-Origin: http://example.com
Access-Control-Max-Age: 3628800
Access-Control-Allow-Credentials: true
Access-Control-Allow-Methods: GET,DELETE,OPTIONS
Access-Control-Allow-Headers: Authorization, Content-Type, If-Modified-Since, If-None-Match, X-Requested-With
Access-Control-Expose-Headers: ETag, X-Rate-Limit-Limit, X-Rate-Limit-Remaining, X-Rate-Limit-Reset
X-Rate-Limit-Limit: 5400
X-Rate-Limit-Remaining: 5396
X-Rate-Limit-Reset: 1450814971
Last-Modified: Tue, 22 Dec 2015 19:09:18 GMT
X-Content-Type-Options: nosniff
ETag: W/"079f7567b040b8f83e9d246018d7c115cea24c3a"
Cache-Control: private, no-cache, no-store, max-age=0, must-revalidate
```


# Group General
## General Purpose Endpoints. [/]
Comprehensive list of secondary endpoints.

## List all Endpoints. [GET /]

Retrieve a complete list with all available endpoints and call methods.

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "name": {
                                    "description": "Endpoint name",
                                    "type": "string"
                                },
                                "uri": {
                                    "description": "Endpoint URI",
                                    "type": "string"
                                },
                                "methods": {
                                    "description": "List of valid HTTP Methods for this Endpoint",
                                    "type": "array",
                                    "items": {
                                        "enum": [
                                            "GET",
                                            "POST",
                                            "DELETE",
                                            "PUT",
                                            "PATCH"
                                        ]
                                    },
                                    "minItems": 1,
                                    "uniqueItems": true
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }


# Group Company
## Company Credentials. [/companies/{companySlug}/credentials]
Also known as API Keys, a Company Credential is a way of identifying a specific Company accessing the API from a
specific origin (eg. using a plugin from website X, or from website Y).

## List all Credentials. [GET /companies/{companySlug}/credentials]

Retrieves a complete list of all credentials that belong to the requesting company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /companies/{companySlug}/credentials",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Credential response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "company_id": {
                                    "description": "Company owner of the Credential",
                                    "type": "integer"
                                },
                                "name": {
                                    "description": "Credential Name",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "slug": {
                                    "description": "Slug based on Credential's name",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9_-]+"
                                },
                                "public": {
                                    "description": "Credential's Public Key, generated by the API",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9]{16}"
                                },
                                "private": {
                                    "description": "Credential's Private Key, generated by the API",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9]{16}"
                                },
                                "production": {
                                    "description": "Says whether the Credential is a production credential or a development credential, defaults to false",
                                    "type": "boolean"
                                },
                                "created_at": {
                                    "description": "Credential's creation unixtimestamp",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Credential's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Create new Credential. [POST /companies/{companySlug}/credentials]

Creates a new credential for the requesting company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + name: My-Credential (string) - Credential name
        + production: false (boolean) - Production flag

    + Body

            {
                "name": "My-Credential",
                "production": "false"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /companies/{companySlug}/credentials",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Credential response payload",
                        "type": "object",
                        "properties": {
                            "company_id": {
                                "description": "Company owner of the Credential",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Credential Name",
                                "type": "string",
                                "pattern": ""
                            },
                            "slug": {
                                "description": "Slug based on Credential's name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "public": {
                                "description": "Credential's Public Key, generated by the API",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9]{16}"
                            },
                            "private": {
                                "description": "Credential's Private Key, generated by the API",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9]{16}"
                            },
                            "production": {
                                "description": "Says whether the Credential is a production credential or a development credential, defaults to false",
                                "type": "boolean"
                            },
                            "created_at": {
                                "description": "Credential's creation unixtimestamp",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Credential's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Retrieve a single Credential. [GET /companies/{companySlug}/credentials/{pubKey}]

Retrieves all public information from a Credential

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + pubKey: `FEDCBA` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /companies/{companySlug}/credentials/{pubKey}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Credential response payload",
                        "type": "object",
                        "properties": {
                            "company_id": {
                                "description": "Company owner of the Credential",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Credential Name",
                                "type": "string",
                                "pattern": ""
                            },
                            "slug": {
                                "description": "Slug based on Credential's name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "public": {
                                "description": "Credential's Public Key, generated by the API",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9]{16}"
                            },
                            "private": {
                                "description": "Credential's Private Key, generated by the API",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9]{16}"
                            },
                            "production": {
                                "description": "Says whether the Credential is a production credential or a development credential, defaults to false",
                                "type": "boolean"
                            },
                            "created_at": {
                                "description": "Credential's creation unixtimestamp",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Credential's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Update a single Credential. [PUT /companies/{companySlug}/credentials/{pubKey}]

Updates Credential's specific information

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + pubKey: `FEDCBA` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + name: New-Name (string) - New Credential name

    + Body

            {
                "name": "New-Name"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "PUT /companies/{companySlug}/credentials/{pubKey}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Credential response payload",
                        "type": "object",
                        "properties": {
                            "company_id": {
                                "description": "Company owner of the Credential",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Credential Name",
                                "type": "string",
                                "pattern": ""
                            },
                            "slug": {
                                "description": "Slug based on Credential's name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "public": {
                                "description": "Credential's Public Key, generated by the API",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9]{16}"
                            },
                            "private": {
                                "description": "Credential's Private Key, generated by the API",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9]{16}"
                            },
                            "production": {
                                "description": "Says whether the Credential is a production credential or a development credential, defaults to false",
                                "type": "boolean"
                            },
                            "created_at": {
                                "description": "Credential's creation unixtimestamp",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Credential's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Deletes a single Credential. [DELETE /companies/{companySlug}/credentials/{pubKey}]

Deletes a single Credential that belongs to the target company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + pubKey: `FEDCBA` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /companies/{companySlug}/credentials/{pubKey}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "deleted": {
                        "description": "Number of sucessfully deleted credentials",
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "status"
                ]
            }

## Company Hook. [/companies/{companySlug}/credentials/{pubKey}/hooks]
A Hook is a feature that allows a Company to receive updates or alerts when a User changes their data in a specific
way. If a User deletes or updates a certain attribute, a Hook will update or alert the Company in realtime.

## List all Hooks. [GET /companies/{companySlug}/credentials/{pubKey}/hooks]

Retrieves a complete list of all hooks that belong to the requesting credential.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + pubKey: `8b5fe9db84e338b424ed6d59da3254a0` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /companies/{companySlug}/credentials/{pubKey}/hooks",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Hook response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "trigger": {
                                    "description": "Hook trigger",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "url": {
                                    "description": "Hook callback URL",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "subscribed": {
                                    "description": "Hook subscribed",
                                    "type": "boolean"
                                },
                                "created_at": {
                                    "description": "Hook's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Hooks's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Create new hook. [POST /companies/{companySlug}/credentials/{pubKey}/hooks]

Create a new hook for the requesting credential.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + pubKey: `8b5fe9db84e338b424ed6d59da3254a0` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + trigger: company.create (string) - Trigger
        + url: http://test.com/example.php (string) - Url
        + subscribed: false (boolean) - Subscribed

    + Body

            {
                "trigger": "company.create",
                "url": "http:\/\/test.com\/example.php",
                "subscribed": "false"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "https://api.idos.io/1.0/schema/hook/hookEntity.json",
                "title": "Hook",
                "type": "object",
                "properties": {
                    "trigger": {
                        "description": "Hook trigger",
                        "type": "string",
                        "pattern": ""
                    },
                    "url": {
                        "description": "Hook callback URL",
                        "type": "string",
                        "pattern": ""
                    },
                    "subscribed": {
                        "description": "Hook subscribed",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Hook's creation unixtime",
                        "type": "integer"
                    },
                    "updated_at": {
                        "description": "Hooks's last update unixtime",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "trigger",
                    "url",
                    "subscribed",
                    "created_at"
                ]
            }

## Update a single hook. [PATCH /companies/{companySlug}/credentials/{pubKey}/hooks/{hookId}]

Updates a hook that belongs to the requesting credential.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + pubKey: `8b5fe9db84e338b424ed6d59da3254a0` (string, required)
    + hookId: `1` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + trigger: company.create (string) - Trigger
        + url: http://test.com/example.php (string) - Url
        + subscribed: false (boolean) - Subscribed

    + Body

            {
                "trigger": "company.create",
                "url": "http:\/\/test.com\/example.php",
                "subscribed": "false"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "PUT /companies/{companySlug}/credentials/{pubKey}/hooks/{hookId}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Hook response payload",
                        "type": "object",
                        "properties": {
                            "trigger": {
                                "description": "Hook trigger",
                                "type": "string",
                                "pattern": ""
                            },
                            "url": {
                                "description": "Hook callback URL",
                                "type": "string",
                                "pattern": ""
                            },
                            "subscribed": {
                                "description": "Hook subscribed",
                                "type": "boolean"
                            },
                            "created_at": {
                                "description": "Hook's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Hooks's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Retrieve a single hook. [GET /companies/{companySlug}/credentials/{pubKey}/hooks/{hookId}]

Retrieves all public information from a hook

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + pubKey: `8b5fe9db84e338b424ed6d59da3254a0` (string, required)
    + hookId: `1` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "https://api.idos.io/1.0/schema/hook/hookEntity.json",
                "title": "Hook",
                "type": "object",
                "properties": {
                    "trigger": {
                        "description": "Hook trigger",
                        "type": "string",
                        "pattern": ""
                    },
                    "url": {
                        "description": "Hook callback URL",
                        "type": "string",
                        "pattern": ""
                    },
                    "subscribed": {
                        "description": "Hook subscribed",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Hook's creation unixtime",
                        "type": "integer"
                    },
                    "updated_at": {
                        "description": "Hooks's last update unixtime",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "trigger",
                    "url",
                    "subscribed",
                    "created_at"
                ]
            }

## Delete a single hook. [DELETE /companies/{companySlug}/credentials/{pubKey}/hooks/{hookId}]

Deletes a hook that belongs to the requesting credential.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + pubKey: `8b5fe9db84e338b424ed6d59da3254a0` (string, required)
    + hookId: `1` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /companies/{companySlug}/credentials/{pubKey}/hooks/{hookId}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    }
                },
                "required": [
                    "status"
                ]
            }

## Company Invitations. [/companies/{companySlug}/invitation/{invitationId}]
Company Invitations is the best way to add new Members to a Company.
The invitation is sent by e-mail and contains a unique sign-up link with limited expiration time.

## Deletes a single Invitation. [DELETE /companies/{companySlug}/invitation/{invitationId}]

Deletes a single Invitation that belongs to the requesting company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + invitationId: `1243` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /companies/{companySlug}/invitations/{invitationId}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    }
                },
                "required": [
                    "status"
                ]
            }

## Updates a single Invitation. [PATCH /companies/{companySlug}/invitation/{invitationId}]

Updates a single Invitation that belongs to the requesting company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + invitationId: `1243` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "PUT /companies/{companySlug}/invitations/{invitationId}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Invitation response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Invitation id",
                                "type": "integer",
                                "pattern": ""
                            },
                            "member_id": {
                                "description": "Member Id",
                                "type": "integer",
                                "pattern": ""
                            },
                            "name": {
                                "description": "Future member's name",
                                "type": "string",
                                "pattern": ""
                            },
                            "email": {
                                "description": "Future member's email",
                                "type": "string",
                                "pattern": ""
                            },
                            "role": {
                                "description": "Future member's role",
                                "type": "string",
                                "pattern": ""
                            },
                            "voided": {
                                "description": "Invitation's voided, true when it was already used",
                                "type": "boolean",
                                "pattern": ""
                            },
                            "expires": {
                                "description": "Invitation's expiration unixtime",
                                "type": "integer"
                            },
                            "created_at": {
                                "description": "Invitation's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Invitation's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Creates new Invitation. [POST /companies/{companySlug}/invitations]

Creates a new invitation for the requesting company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + role: company.owner (string) - Role type
        + email: jhondoe@idos.io (string) - User's email
        + name: jhon (string) - User's name
        + credentialPubKey: wqxehuwqwsthwosjbxwwsqwsdi (string) - A valid credential public key
        + expires: 2016-11-23 (string) - Expiration date (if no expiration date is passed, the invitation will expire in one day)

    + Body

            {
                "role": "company.owner",
                "email": "jhondoe@idos.io",
                "name": "jhon",
                "credentialPubKey": "wqxehuwqwsthwosjbxwwsqwsdi",
                "expires": "2016-11-23"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /companies/{companySlug}/invitations",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Invitation response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Invitation id",
                                "type": "integer",
                                "pattern": ""
                            },
                            "member_id": {
                                "description": "Member Id",
                                "type": "integer",
                                "pattern": ""
                            },
                            "name": {
                                "description": "Future member's name",
                                "type": "string",
                                "pattern": ""
                            },
                            "email": {
                                "description": "Future member's email",
                                "type": "string",
                                "pattern": ""
                            },
                            "role": {
                                "description": "Future member's role",
                                "type": "string",
                                "pattern": ""
                            },
                            "voided": {
                                "description": "Invitation's voided, true when it was already used",
                                "type": "boolean",
                                "pattern": ""
                            },
                            "expires": {
                                "description": "Invitation's expiration unixtime",
                                "type": "integer"
                            },
                            "created_at": {
                                "description": "Invitation's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Invitation's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Retrieve a list of invitations for this company. [GET /companies/{companySlug}/invitations]

Retrieves all public information from Invitations

+ Parameters
    + companySlug: `veridu-ltd` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /companies/{companySlug}/invitations",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Invitation response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "Invitation id",
                                    "type": "integer",
                                    "pattern": ""
                                },
                                "member_id": {
                                    "description": "Member Id",
                                    "type": "integer",
                                    "pattern": ""
                                },
                                "name": {
                                    "description": "Future member's name",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "email": {
                                    "description": "Future member's email",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "role": {
                                    "description": "Future member's role",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "voided": {
                                    "description": "Invitation's voided, true when it was already used",
                                    "type": "boolean",
                                    "pattern": ""
                                },
                                "expires": {
                                    "description": "Invitation's expiration unixtime",
                                    "type": "integer"
                                },
                                "created_at": {
                                    "description": "Invitation's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Invitation's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Company Members. [/companies/{companySlug}/members]
Each Company can have one or more Company Members, these Company Members will have access to the Company
configuration and information as controlled by the Access Roles.
All Access Roles configured in a parent Company will have access to all date from children Companies created.
These users will NOT be visible to users who only have access to the child Company.

Default roles available are:
 - **Administrator:** an administrator will have full read/write access
 - **Reviewer:** a reviewer is allowed to view the end-users who have been verified. They are also able to
provide review feedback and view reports.

**Note:** advanced usage only.

## List all Members. [GET /companies/{companySlug}/members]

Retrieves a complete list of all members that belong to the requesting company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /companies/{companySlug}/members",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Member response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "Member id",
                                    "type": "integer",
                                    "pattern": ""
                                },
                                "company_id": {
                                    "description": "Company Id",
                                    "type": "integer",
                                    "pattern": ""
                                },
                                "identity_id": {
                                    "description": "Identity Id",
                                    "type": "integer",
                                    "pattern": ""
                                },
                                "role": {
                                    "description": "Role access of the member in the company",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "created_at": {
                                    "description": "Member's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Member's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Retrieve a single Member. [GET /companies/{companySlug}/members/{memberId}]

Retrieves all public information from a Member

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + memberId: `1243` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "https://api.idos.io/1.0/schema/member/memberEntity.json",
                "title": "Member",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Member id",
                        "type": "integer",
                        "pattern": ""
                    },
                    "company_id": {
                        "description": "Company Id",
                        "type": "integer",
                        "pattern": ""
                    },
                    "identity_id": {
                        "description": "Identity Id",
                        "type": "integer",
                        "pattern": ""
                    },
                    "role": {
                        "description": "Role access of the member in the company",
                        "type": "string",
                        "pattern": ""
                    },
                    "created_at": {
                        "description": "Member's creation unixtime",
                        "type": "integer"
                    },
                    "updated_at": {
                        "description": "Member's last update unixtime",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "id",
                    "company_id",
                    "identity_id",
                    "role",
                    "created_at",
                    "updated_at"
                ]
            }

## Updates a single Member. [PATCH /companies/{companySlug}/members/{memberId}]

Updates one member data.

Updates a company member identified by the given id.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + memberId: `1243` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + role: company.owner (string) - Role type

    + Body

            {
                "role": "company.owner"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "PUT /companies/{companySlug}/members/{username}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Member response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Member id",
                                "type": "integer",
                                "pattern": ""
                            },
                            "company_id": {
                                "description": "Company Id",
                                "type": "integer",
                                "pattern": ""
                            },
                            "identity_id": {
                                "description": "Identity Id",
                                "type": "integer",
                                "pattern": ""
                            },
                            "role": {
                                "description": "Role access of the member in the company",
                                "type": "string",
                                "pattern": ""
                            },
                            "created_at": {
                                "description": "Member's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Member's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Deletes a single Member. [DELETE /companies/{companySlug}/members/{memberId}]

Deletes one member from the database.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + memberId: `1243` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /companies/{companySlug}/members/{username}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    }
                },
                "required": [
                    "status"
                ]
            }

## Get the membership related to the requesting Identity. [GET /companies/{companySlug}/membership]

Retrieve a member entity related to that company and identity.

Acting User: the user that is performing the system action
Target User: the user that is receiving the system action
Acting Company: the company that is performing the system action
Target Company: the company that is receiving the system action
Credential: the credential used during the request (may be missing)

+ Parameters
    + companySlug: `veridu-ltd` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

## Company Profile. [/companies/{companySlug}/profiles]
The Company Profile endpoint lists a summary all users associated to a specific company, including details such as
the attributes, gates, etc.
It can also be used to retrieve a summary of all information related to single user or delete a single user.

## List all CompanyProfiles. [GET /companies/{companySlug}/profiles]

Retrieve a complete list of all users that belong to this company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /companies/{companySlug}/profiles",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "CompanyProfiles response payload",
                        "type": "array",
                        "items": {
                            "username": {
                                "description": "user's username",
                                "type": "string",
                                "pattern": ""
                            },
                            "firstnames": {
                                "description": "User's first names",
                                "type": "array"
                            },
                            "middlenames": {
                                "description": "User's middle names",
                                "type": "array"
                            },
                            "lastnames": {
                                "description": "User's last names",
                                "type": "array"
                            },
                            "warnings": {
                                "description": "User's warnings",
                                "type": "array",
                                "items": {
                                    "   $ref": "../warning/warningEntity.json"
                                }
                            },
                            "gates": {
                                "description": "User's gates",
                                "type": "array",
                                "items": {
                                    "$ref": {
                                        "id": {
                                            "description": "Gate id",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "Gate's name",
                                            "type": "string",
                                            "pattern": "[a-zA-Z0-9_-]+"
                                        },
                                        "slug": {
                                            "description": "Gate's slug",
                                            "type": "string",
                                            "pattern": "[a-zA-Z0-9_-]+"
                                        },
                                        "confidence_level": {
                                            "description": "Gate's confidence level",
                                            "type": "string",
                                            "pattern": "[a-zA-Z]+"
                                        },
                                        "created_at": {
                                            "description": "Gate's creation unixtime",
                                            "type": "integer"
                                        },
                                        "updated_at": {
                                            "description": "Gate's last update unixtime",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    }
                                }
                            },
                            "created_at": {
                                "description": "User's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "User's last update unixtime",
                                "type": [
                                    "integer",
                                    null
                                ]
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": [
                            "integer",
                            null
                        ]
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Retrieve a single company profile. [GET /companies/{companySlug}/profiles/{userId}]

Retrieves all public information from a company profile.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + userId: `3215132` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /companies/{companySlug}/profiles/{userId}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Company profile response payload",
                        "type": "object",
                        "properties": {
                            "username": {
                                "description": "user's username",
                                "type": "string",
                                "pattern": ""
                            },
                            "firstnames": {
                                "description": "User's first names",
                                "type": "array"
                            },
                            "middlenames": {
                                "description": "User's middle names",
                                "type": "array"
                            },
                            "lastnames": {
                                "description": "User's last names",
                                "type": "array"
                            },
                            "warnings": {
                                "description": "User's warnings",
                                "type": "array",
                                "items": {
                                    "   $ref": "../warning/warningEntity.json"
                                }
                            },
                            "gates": {
                                "description": "User's gates",
                                "type": "array",
                                "items": {
                                    "$ref": {
                                        "id": {
                                            "description": "Gate id",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "Gate's name",
                                            "type": "string",
                                            "pattern": "[a-zA-Z0-9_-]+"
                                        },
                                        "slug": {
                                            "description": "Gate's slug",
                                            "type": "string",
                                            "pattern": "[a-zA-Z0-9_-]+"
                                        },
                                        "confidence_level": {
                                            "description": "Gate's confidence level",
                                            "type": "string",
                                            "pattern": "[a-zA-Z]+"
                                        },
                                        "created_at": {
                                            "description": "Gate's creation unixtime",
                                            "type": "integer"
                                        },
                                        "updated_at": {
                                            "description": "Gate's last update unixtime",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    }
                                }
                            },
                            "created_at": {
                                "description": "User's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "User's last update unixtime",
                                "type": [
                                    "integer",
                                    null
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": [
                            "integer",
                            null
                        ]
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

+ Response 404 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

## Deletes a single Company profile. [DELETE /companies/{companySlug}/profiles/{userId}]

Deletes the requested company profile.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + userId: `3215132` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /companies/{companySlug}/profiles/{userId}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    }
                },
                "required": [
                    "status"
                ]
            }

+ Response 404 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }
## Company Settings. [/companies/{companySlug}/settings]
Company Settings is used for a wide range of minor and major changes for a specific Company.
Settings are used to change multiple aspects of the layout of the API dashboard, the way certain information
is displayed in order to tailor to a certain company's thematic requests, or to create different environments
suited to different purposes.

**Note:** advanced usage only.

## List all Settings. [GET /companies/{companySlug}/settings{?page}]

Retrieves a complete list of all settings that belong to the requesting company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + page: `10` (number, optional) - Current page
        + default: `1`

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /companies/{companySlug}/settings",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Settings response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "company_id": {
                                    "description": "Company owner of the Credential",
                                    "type": "integer"
                                },
                                "section": {
                                    "description": "Section name",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9_-]+"
                                },
                                "property": {
                                    "description": "Property name",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9_-]+"
                                },
                                "value": {
                                    "description": "Property value",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "created_at": {
                                    "description": "Setting's creation unixtimestamp",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Setting's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Create new Setting. [POST /companies/{companySlug}/settings]

Creates a new credential for the requesting company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + section: AppTokens (string) - Section name
        + property: 1abc7jdoxsaz.facebook.key (string) -  Property name
        + value: 492361674b (string) - Property value
        + protected: true (boolean) - Protected value

    + Body

            {
                "section": "AppTokens",
                "property": "1abc7jdoxsaz.facebook.key",
                "value": "492361674b",
                "protected": "true"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /companies",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Settings response payload",
                        "type": "object",
                        "properties": {
                            "company_id": {
                                "description": "Company owner of the Credential",
                                "type": "integer"
                            },
                            "section": {
                                "description": "Section name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "property": {
                                "description": "Property name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "value": {
                                "description": "Property value",
                                "type": "string",
                                "pattern": ""
                            },
                            "created_at": {
                                "description": "Setting's creation unixtimestamp",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Setting's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Retrieve a single Setting. [GET /companies/{companySlug}/settings/{settingId}]

Retrieves all public information from a Setting.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + settingId: `1` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /companies/{companySlug}/settings/{section}/{property}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Settings response payload",
                        "type": "object",
                        "properties": {
                            "company_id": {
                                "description": "Company owner of the Credential",
                                "type": "integer"
                            },
                            "section": {
                                "description": "Section name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "property": {
                                "description": "Property name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "value": {
                                "description": "Property value",
                                "type": "string",
                                "pattern": ""
                            },
                            "created_at": {
                                "description": "Setting's creation unixtimestamp",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Setting's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": [
                            "integer",
                            null
                        ]
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Update a single Setting. [PATCH /companies/{companySlug}/settings/{settingId}]

Updates the specific information for a single Setting.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + settingId: `1` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + value: 492361674b (string) - Property value

    + Body

            {
                "value": "492361674b"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "PUT /companies/{companySlug}/settings/{section}/{property}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Settings response payload",
                        "type": "object",
                        "properties": {
                            "company_id": {
                                "description": "Company owner of the Credential",
                                "type": "integer"
                            },
                            "section": {
                                "description": "Section name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "property": {
                                "description": "Property name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "value": {
                                "description": "Property value",
                                "type": "string",
                                "pattern": ""
                            },
                            "created_at": {
                                "description": "Setting's creation unixtimestamp",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Setting's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Deletes a single Setting. [DELETE /companies/{companySlug}/settings/{settingId}]

Deletes a single Setting that belongs to the requesting company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + settingId: `1` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /companies/{companySlug}/settings/{section}/{property}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    }
                },
                "required": [
                    "status"
                ]
            }

## Company Subscriptions. [/companies/{companySlug}/credentials/{credentialPubKey}/subscriptions]
Company Subscription is a way of assigning a specific Company to a Gate.

## List all Subscriptions. [GET /companies/{companySlug}/credentials/{credentialPubKey}/subscriptions]

Retrieves a complete list of all subscriptions that belong to the requesting credential.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + credentialPubKey: `g89d7fg9d87gf9d8fgdfgadasd` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /companies/{companySlug}/credentials",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Credential response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "company_id": {
                                    "description": "Company owner of the Credential",
                                    "type": "integer"
                                },
                                "name": {
                                    "description": "Credential Name",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "slug": {
                                    "description": "Slug based on Credential's name",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9_-]+"
                                },
                                "public": {
                                    "description": "Credential's Public Key, generated by the API",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9]{16}"
                                },
                                "private": {
                                    "description": "Credential's Private Key, generated by the API",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9]{16}"
                                },
                                "production": {
                                    "description": "Says whether the Credential is a production credential or a development credential, defaults to false",
                                    "type": "boolean"
                                },
                                "created_at": {
                                    "description": "Credential's creation unixtimestamp",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Credential's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Create new Subscription. [POST /companies/{companySlug}/credentials/{credentialPubKey}/subscriptions]

Creates a new subscription for the requesting company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + credentialPubKey: `SDFSDGDHG67567567` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + categorySlug: firstName (string) - Subscription categorySlug

    + Body

            {
                "categorySlug": "firstName"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /companies/{companySlug}/credentials",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Credential response payload",
                        "type": "object",
                        "properties": {
                            "company_id": {
                                "description": "Company owner of the Credential",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Credential Name",
                                "type": "string",
                                "pattern": ""
                            },
                            "slug": {
                                "description": "Slug based on Credential's name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "public": {
                                "description": "Credential's Public Key, generated by the API",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9]{16}"
                            },
                            "private": {
                                "description": "Credential's Private Key, generated by the API",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9]{16}"
                            },
                            "production": {
                                "description": "Says whether the Credential is a production credential or a development credential, defaults to false",
                                "type": "boolean"
                            },
                            "created_at": {
                                "description": "Credential's creation unixtimestamp",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Credential's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Deletes a single Subscription. [DELETE /companies/{companySlug}/credentials/{credentialPubKey}/subscriptions/{subscriptionId}]

Deletes a single Subscription that belongs to the target company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + credentialPubKey: `SDFSDGDHG67567567` (string, required)
    + subscriptionId: `321654` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /companies/{companySlug}/credentials/{pubKey}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "deleted": {
                        "description": "Number of sucessfully deleted credentials",
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "status"
                ]
            }

## Company Widget. [/companies/{companySlug}/widgets]
A Widget is a out of the box, one line of code integration that we provide for customers.

## List all Widgets. [GET /companies/{companySlug}/widgets]

Retrieves a complete list of all widgets that belong to the requesting credential.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /companies/{companySlug}/credentials/{pubKey}/widgets",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Widget response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "hash": {
                                    "description": "Widget's identifier",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9]{32}"
                                },
                                "label": {
                                    "description": "Widget's label",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Widget type",
                                    "enum": [
                                        "embedded-widget"
                                    ]
                                },
                                "config": {
                                    "description": "Widget's configuration in json format",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9_-]+"
                                },
                                "credential": {
                                    "description": "Credential's Public Key, generated by the API",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9]{16}"
                                },
                                "created_at": {
                                    "description": "Widget's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Widget's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Create new widget. [POST /companies/{companySlug}/widgets]

Create a new widget for the target company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + hash: abcd1234 (string) - Hash
        + label: Widget (string) - Label
        + type: embedded-widget (string) - Type
        + enabled: true (boolean) - Enabled
        + config: ['gates' (string) - => '18+'] Settings

    + Body

            {
                "hash": "abcd1234",
                "label": "Widget",
                "type": "embedded-widget",
                "enabled": "true",
                "config": "['gates'"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "https://api.idos.io/1.0/schema/widget/widgetEntity.json",
                "title": "Widget",
                "type": "object",
                "properties": {
                    "hash": {
                        "description": "Widget's identifier",
                        "type": "string",
                        "pattern": "[a-zA-Z0-9]{32}"
                    },
                    "label": {
                        "description": "Widget's label",
                        "type": "string"
                    },
                    "type": {
                        "description": "Widget type",
                        "enum": [
                            "embedded-widget"
                        ]
                    },
                    "config": {
                        "description": "Widget's configuration in json format",
                        "type": "string",
                        "pattern": "[a-zA-Z0-9_-]+"
                    },
                    "credential": {
                        "description": "Credential's Public Key, generated by the API",
                        "type": "string",
                        "pattern": "[a-zA-Z0-9]{16}"
                    },
                    "created_at": {
                        "description": "Widget's creation unixtime",
                        "type": "integer"
                    },
                    "updated_at": {
                        "description": "Widget's last update unixtime",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "hash",
                    "label",
                    "type",
                    "config",
                    "credential",
                    "created_at",
                    "updated_at"
                ]
            }

## Update a single widget. [PUT /companies/{companySlug}/widgets/{widgetHash}]

Updates a widget that belongs to the requesting credential.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + widgetHash: `23sadje320sfa12584jhhqw1q` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + hash: abcd1234 (string) - Hash
        + label: Widget (string) - Label
        + type: embedded-widget (string) - Type
        + enabled: true (boolean) - Enabled
        + config: ['gates' (string) - => '18+'] Settings

    + Body

            {
                "hash": "abcd1234",
                "label": "Widget",
                "type": "embedded-widget",
                "enabled": "true",
                "config": "['gates'"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "PUT /companies/{companySlug}/credentials/{pubKey}/widgets/{widgetId}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Widget response payload",
                        "type": "object",
                        "properties": {
                            "hash": {
                                "description": "Widget's identifier",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9]{32}"
                            },
                            "label": {
                                "description": "Widget's label",
                                "type": "string"
                            },
                            "type": {
                                "description": "Widget type",
                                "enum": [
                                    "embedded-widget"
                                ]
                            },
                            "config": {
                                "description": "Widget's configuration in json format",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "credential": {
                                "description": "Credential's Public Key, generated by the API",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9]{16}"
                            },
                            "created_at": {
                                "description": "Widget's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Widget's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Retrieve a single widget. [GET /companies/{companySlug}/widgets/{widgetHash}]

Retrieves all public information from a widget

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + widgetHash: `23sadje320sfa12584jhhqw1q` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "https://api.idos.io/1.0/schema/widget/widgetEntity.json",
                "title": "Widget",
                "type": "object",
                "properties": {
                    "hash": {
                        "description": "Widget's identifier",
                        "type": "string",
                        "pattern": "[a-zA-Z0-9]{32}"
                    },
                    "label": {
                        "description": "Widget's label",
                        "type": "string"
                    },
                    "type": {
                        "description": "Widget type",
                        "enum": [
                            "embedded-widget"
                        ]
                    },
                    "config": {
                        "description": "Widget's configuration in json format",
                        "type": "string",
                        "pattern": "[a-zA-Z0-9_-]+"
                    },
                    "credential": {
                        "description": "Credential's Public Key, generated by the API",
                        "type": "string",
                        "pattern": "[a-zA-Z0-9]{16}"
                    },
                    "created_at": {
                        "description": "Widget's creation unixtime",
                        "type": "integer"
                    },
                    "updated_at": {
                        "description": "Widget's last update unixtime",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "hash",
                    "label",
                    "type",
                    "config",
                    "credential",
                    "created_at",
                    "updated_at"
                ]
            }

## Delete a single widget. [DELETE /companies/{companySlug}/widgets/{widgetHash}]

Deletes a widget that belongs to the requesting credential.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + widgetHash: `23sadje320sfa12584jhhqw1q` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /companies/{companySlug}/credentials/{pubKey}/widgets/{widgetId}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    }
                },
                "required": [
                    "status"
                ]
            }

## Company. [/companies]
Within the hierarchy a Company allows you to separate access to the services to specific individuals.
Each Company is allowed to have multiple Users, Keys, Widgets and even other Companies.
All Access Roles configured in a parent Company will have access to all data from children Companies created.
These users will NOT be visible to users who only have access to the child Company.

## List all Companies. [GET /companies{?after,before,page}]

Retrieves a complete list of all child companies that belong to the requesting company.

+ Parameters
    + after: `2016-01-01` (string, optional) - Initial Company creation date (lower bound)
        + default: `1070-01-01`
    + before: `2016-01-31` (string, optional) - Final Company creation date (upper bound)
        + default: `2016-12-31`
    + page: `10` (number, optional) - Current page
        + default: `1`

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /companies",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Company response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "name": {
                                    "description": "Company Name",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "slug": {
                                    "description": "Slug based on Company's name",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9_-]+"
                                },
                                "public_key": {
                                    "description": "Public Key for management calls",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9]{16}"
                                },
                                "created_at": {
                                    "description": "Company's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Company's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Retrieve a single Company. [GET /companies/{companySlug}]

Retrieves all public information about a single Company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /companies",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Company response payload",
                        "type": "object",
                        "properties": {
                            "name": {
                                "description": "Company Name",
                                "type": "string",
                                "pattern": ""
                            },
                            "slug": {
                                "description": "Slug based on Company's name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "public_key": {
                                "description": "Public Key for management calls",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9]{16}"
                            },
                            "created_at": {
                                "description": "Company's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Company's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Create a new Company. [POST /companies/{companySlug}]

Creates a new child company for the {companySlug} company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required) - Parent company

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + name: NewCo. (string) - Company name

    + Body

            {
                "name": "NewCo."
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /companies",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Company response payload",
                        "type": "object",
                        "properties": {
                            "name": {
                                "description": "Company Name",
                                "type": "string",
                                "pattern": ""
                            },
                            "slug": {
                                "description": "Slug based on Company's name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "public_key": {
                                "description": "Public Key for management calls",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9]{16}"
                            },
                            "created_at": {
                                "description": "Company's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Company's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Update a single Company. [PATCH /companies/{companySlug}]

Updates the information for a single Company.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + name: NewName (string) - New Company name

    + Body

            {
                "name": "NewName"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "PUT /companies/{companySlug}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Company response payload",
                        "type": "object",
                        "properties": {
                            "name": {
                                "description": "Company Name",
                                "type": "string",
                                "pattern": ""
                            },
                            "slug": {
                                "description": "Slug based on Company's name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "public_key": {
                                "description": "Public Key for management calls",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9]{16}"
                            },
                            "created_at": {
                                "description": "Company's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Company's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Deletes a single Company. [DELETE /companies/{companySlug}]

Deletes the requesting company or a child company that belongs to it.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /companies/{companySlug}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    }
                },
                "required": [
                    "status"
                ]
            }


# Group Profile
## Attribute Score. [/profiles/{userName}/scores]
An Attribute Score is a numerical score given to a specific Attribute representing how confident the API is in
this information. If a User has multiple Attribute Candidates across multiple sources, then the API will provide
the Attribute with a score representing how likely of it being true.

## List all scores. [GET /profiles/{userName}/scores{?names}]

Retrieve a complete list of the scores from a given attribute.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + names: `firstName,lastName` (string, optional)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/attributes/{attributeName}/scores",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Score response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "creator": {
                                    "description": "Score Creator",
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "description": "Service Name",
                                            "type": "string",
                                            "pattern": ""
                                        }
                                    }
                                },
                                "attribute": {
                                    "description": "Score attribute name",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9-_]"
                                },
                                "name": {
                                    "description": "Score name",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9-_]"
                                },
                                "value": {
                                    "description": "Score value",
                                    "type": "number"
                                },
                                "created_at": {
                                    "description": "Score's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Score's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Creates a new score. [POST /profiles/{userName}/scores]

Creates a new score for the given attribute.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + attribute: firstName (string) - Score attribute
        + name: overall (string) - Score name
        + value: 0.2 (number) - Score value

    + Body

            {
                "attribute": "firstName",
                "name": "overall",
                "value": 0.2
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "https://api.idos.io/1.0/schema/score/scoreEntity.json",
                "title": "Score",
                "type": "object",
                "properties": {
                    "creator": {
                        "description": "Score Creator",
                        "type": "object",
                        "properties": {
                            "name": {
                                "description": "Service Name",
                                "type": "string",
                                "pattern": ""
                            }
                        }
                    },
                    "attribute": {
                        "description": "Score attribute name",
                        "type": "string",
                        "pattern": "[a-zA-Z0-9-_]"
                    },
                    "name": {
                        "description": "Score name",
                        "type": "string",
                        "pattern": "[a-zA-Z0-9-_]"
                    },
                    "value": {
                        "description": "Score value",
                        "type": "number"
                    },
                    "created_at": {
                        "description": "Score's creation unixtime",
                        "type": "integer"
                    },
                    "updated_at": {
                        "description": "Score's last update unixtime",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "attribute",
                    "name",
                    "value",
                    "created_at"
                ]
            }

## Create or update a score. [PUT /profiles/{userName}/scores]

Creates or updates a score for the given attribute.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + attribute: firstName (string) - Score attribute
        + name: overall (string) - Score name
        + value: 0.2 (number) - Score value

    + Body

            {
                "attribute": "firstName",
                "name": "overall",
                "value": 0.2
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /profiles/{userName}/attributes/{attributeName}/scores",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Score response payload",
                        "type": "object",
                        "properties": {
                            "creator": {
                                "description": "Score Creator",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Service Name",
                                        "type": "string",
                                        "pattern": ""
                                    }
                                }
                            },
                            "attribute": {
                                "description": "Score attribute name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9-_]"
                            },
                            "name": {
                                "description": "Score name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9-_]"
                            },
                            "value": {
                                "description": "Score value",
                                "type": "number"
                            },
                            "created_at": {
                                "description": "Score's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Score's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Deletes all scores. [DELETE /profiles/{userName}/scores]

Deletes all scores of a given attribute.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /profiles/{userName}/attributes/{attributeName}/scores",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "deleted": {
                        "description": "Number of sucessfully deleted scores",
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "status",
                    "deleted"
                ]
            }

## Retrieves a score. [GET /profiles/{userName}/scores/{scoreName}]

Retrieves a score from a given attribute.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + scoreName: `overall` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/attributes/{attributeName}/scores/{scoreName}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Score response payload",
                        "type": "object",
                        "properties": {
                            "creator": {
                                "description": "Score Creator",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Service Name",
                                        "type": "string",
                                        "pattern": ""
                                    }
                                }
                            },
                            "attribute": {
                                "description": "Score attribute name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9-_]"
                            },
                            "name": {
                                "description": "Score name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9-_]"
                            },
                            "value": {
                                "description": "Score value",
                                "type": "number"
                            },
                            "created_at": {
                                "description": "Score's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Score's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Update a score. [PATCH /profiles/{userName}/scores/{scoreName}]

Updates a score for the given attribute.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + scoreName: `overall` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + attribute: firstName (string) - Score attribute
        + name: overall (string) - Score name
        + value: 0.2 (number) - Score value

    + Body

            {
                "attribute": "firstName",
                "name": "overall",
                "value": 0.2
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "PUT /profiles/{userName}/attributes/{attributeName}/scores/{scoreName}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Score response payload",
                        "type": "object",
                        "properties": {
                            "creator": {
                                "description": "Score Creator",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Service Name",
                                        "type": "string",
                                        "pattern": ""
                                    }
                                }
                            },
                            "attribute": {
                                "description": "Score attribute name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9-_]"
                            },
                            "name": {
                                "description": "Score name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9-_]"
                            },
                            "value": {
                                "description": "Score value",
                                "type": "number"
                            },
                            "created_at": {
                                "description": "Score's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Score's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Deletes a score. [DELETE /profiles/{userName}/scores/{scoreName}]

Deletes a score from a given attribute.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + scoreName: `overall` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /profiles/{userName}/attributes/{attributeName}/scores/{scoreName}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    }
                },
                "required": [
                    "status"
                ]
            }

## Profile Attributes. [/profiles/{userName}/attributes]
A Profile Attribute is a specific piece of information within a Profile that has been extracted by the API.
This Attribute can be simple like a first or second name, or more detailed like a User's hometown or employment.
If the API has extracted multiple results for one Attribute, all of them will be listed as Candidates.

## List all profile attributes. [GET /profiles/{userName}/attributes{?names}]

Retrieve a complete list of the attributes for a given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + names: `fistName,middleName,lastName` (string, optional)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken|UserToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/attributes",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Attribute response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "name": {
                                    "description": "Attribute name",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "value": {
                                    "description": "Attribute value",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "created_at": {
                                    "description": "Attribute's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Attribute's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Retrieve a single attribute. [GET /profiles/{userName}/attributes/{attributeName}]

Retrieves all public information from an attribute.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + attributeName: `firstName` (string, required)

+ Request (application/json)
    + Headers

            Authorization: UserToken|CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/attributes/{attributeName}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Attribute response payload",
                        "type": "object",
                        "properties": {
                            "name": {
                                "description": "Attribute name",
                                "type": "string",
                                "pattern": ""
                            },
                            "value": {
                                "description": "Attribute value",
                                "type": "string",
                                "pattern": ""
                            },
                            "created_at": {
                                "description": "Attribute's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Attribute's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Profile Candidate. [/profiles/{userName}/candidates]
Attribute Candidates are listed as all possible results for an Attribute. If the API extracts multiple results for
one Attribute, then it will list each Candidate a numerical support score calculated by the level of presence
it has within the Profile. The Candidate with the highest support score will be given as a Profile Attribute.

## List all candidate data. [GET /profiles/{userName}/candidates{?attributes}]

Retrieve a complete list of the candidates by a given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + attributes: `firstName,middleName,lastName` (string, optional)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/candidate",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Candidate response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "attribute": {
                                    "description": "Attribute name",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "value": {
                                    "description": "Candidate value",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "support": {
                                    "description": "Support score",
                                    "type": "number",
                                    "minimum": 0,
                                    "maximum": 1
                                },
                                "created_at": {
                                    "description": "Candidate's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Candidate's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Creates a new candidate. [POST /profiles/{userName}/candidates]

Creates a new candidate for the given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + attribute: firstName (string) - Attribute Name
        + value: Jhon (string) - Candidate Value
        + support: 0.7 (number) - Candidate Support

    + Body

            {
                "attribute": "firstName",
                "value": "Jhon",
                "support": 0.7
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "https://api.idos.io/1.0/schema/candidate/candidateEntity.json",
                "title": "Candidate",
                "type": "object",
                "properties": {
                    "attribute": {
                        "description": "Attribute name",
                        "type": "string",
                        "pattern": ""
                    },
                    "value": {
                        "description": "Candidate value",
                        "type": "string",
                        "pattern": ""
                    },
                    "support": {
                        "description": "Support score",
                        "type": "number",
                        "minimum": 0,
                        "maximum": 1
                    },
                    "created_at": {
                        "description": "Candidate's creation unixtime",
                        "type": "integer"
                    },
                    "updated_at": {
                        "description": "Candidate's last update unixtime",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "attribute",
                    "value",
                    "support",
                    "created_at"
                ]
            }

## Deletes all candidates. [DELETE /profiles/{userName}/candidates]

Deletes all candidates for the given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /profiles/{userName}/candidate",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "deleted": {
                        "description": "Number of sucessfully deleted candidates",
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "status",
                    "deleted"
                ]
            }

## Profile Feature. [/profiles/{userName}/features]
A Profile Feature is a specific question the API can answer using data extracted from the Profile.
An example feature could be "quantity of uploaded photos" and the API will give a quantitative answer.
Another example feature could be "User's Facebook and Twitter name matches" and the API will give a yes-no answer.

## List all Features. [GET /profiles/{userName}/features{?page}]

Retrieve a complete list of all features that belong to the given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + page: `10` (number, optional) - Current page
        + default: `1`

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/features",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Features response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "Feature Id",
                                    "type": "number",
                                    "pattern": ""
                                },
                                "name": {
                                    "description": "Feature Name",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "creator": {
                                    "description": "Feature Creator",
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "description": "Service Name",
                                            "type": "string",
                                            "pattern": ""
                                        }
                                    }
                                },
                                "type": {
                                    "description": "Feature Type",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "value": {
                                    "description": "Feature value",
                                    "type": [
                                        "string",
                                        "number",
                                        "boolean",
                                        "array",
                                        "object",
                                        "null"
                                    ]
                                },
                                "source": {
                                    "description": "Source name",
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "pattern": ""
                                },
                                "created_at": {
                                    "description": "Feature's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Feature's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Create new Feature. [POST /profiles/{userName}/features]

Create a new feature for the given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + name: Friend (string) - count  Feature name
        + value: 17 (string) - Feature value
        + type: 17 (string) - Feature type
        + source_id: 25367 (number) - Feature source_id

    + Body

            {
                "name": "Friend",
                "value": "17",
                "type": "integer",
                "source_id": 25367
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /profiles/{userName}/features",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Feature response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Feature Id",
                                "type": "number",
                                "pattern": ""
                            },
                            "name": {
                                "description": "Feature Name",
                                "type": "string",
                                "pattern": ""
                            },
                            "creator": {
                                "description": "Feature Creator",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Service Name",
                                        "type": "string",
                                        "pattern": ""
                                    }
                                }
                            },
                            "type": {
                                "description": "Feature Type",
                                "type": "string",
                                "pattern": ""
                            },
                            "value": {
                                "description": "Feature value",
                                "type": [
                                    "string",
                                    "number",
                                    "boolean",
                                    "array",
                                    "object",
                                    "null"
                                ]
                            },
                            "source": {
                                "description": "Source name",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": ""
                            },
                            "created_at": {
                                "description": "Feature's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Feature's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Create or update a feature. [PUT /profiles/{userName}/features]

Create or update a feature for the given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + name: Friend (string) - count  Feature name
        + value: 17 (string) - Feature value
        + type: 17 (string) - Feature type
        + source_id: 25367 (number) - Feature source_id

    + Body

            {
                "name": "Friend",
                "value": 17,
                "type": "integer",
                "source_id": 25367
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /profiles/{userName}/features",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Feature response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Feature Id",
                                "type": "number",
                                "pattern": ""
                            },
                            "name": {
                                "description": "Feature Name",
                                "type": "string",
                                "pattern": ""
                            },
                            "creator": {
                                "description": "Feature Creator",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Service Name",
                                        "type": "string",
                                        "pattern": ""
                                    }
                                }
                            },
                            "type": {
                                "description": "Feature Type",
                                "type": "string",
                                "pattern": ""
                            },
                            "value": {
                                "description": "Feature value",
                                "type": [
                                    "string",
                                    "number",
                                    "boolean",
                                    "array",
                                    "object",
                                    "null"
                                ]
                            },
                            "source": {
                                "description": "Source name",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": ""
                            },
                            "created_at": {
                                "description": "Feature's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Feature's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Deletes all features. [DELETE /profiles/{userName}/features]

Deletes all features that belongs to the given user

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /profiles/{userName}/features",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "deleted": {
                        "description": "Number of sucessfully deleted features",
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "status",
                    "deleted"
                ]
            }

## Create or update features. [PUT /profiles/{userName}/features/bulk]

Create or update features for the given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + features: [] (array) - Feature features

    + Body

            {
                [
                    "name": "FriendCount",
                    "value": 17,
                    "type": "integer",
                    "source_id": "25367"
                ],
                [
                    "name": "CloseFriendCount",
                    "value": 2,
                    "type": "integer",
                    "source_id": "25367"
                ]
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /profiles/{userName}/features",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Feature response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Feature Id",
                                "type": "number",
                                "pattern": ""
                            },
                            "name": {
                                "description": "Feature Name",
                                "type": "string",
                                "pattern": ""
                            },
                            "creator": {
                                "description": "Feature Creator",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Service Name",
                                        "type": "string",
                                        "pattern": ""
                                    }
                                }
                            },
                            "type": {
                                "description": "Feature Type",
                                "type": "string",
                                "pattern": ""
                            },
                            "value": {
                                "description": "Feature value",
                                "type": [
                                    "string",
                                    "number",
                                    "boolean",
                                    "array",
                                    "object",
                                    "null"
                                ]
                            },
                            "source": {
                                "description": "Source name",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": ""
                            },
                            "created_at": {
                                "description": "Feature's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Feature's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Retrieve a single Feature. [GET /profiles/{userName}/features/{featureId}]

Retrieves all public information from a Feature.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + featureId: `3214` (number, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/features/{featureSlug}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Feature response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Feature Id",
                                "type": "number",
                                "pattern": ""
                            },
                            "name": {
                                "description": "Feature Name",
                                "type": "string",
                                "pattern": ""
                            },
                            "creator": {
                                "description": "Feature Creator",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Service Name",
                                        "type": "string",
                                        "pattern": ""
                                    }
                                }
                            },
                            "type": {
                                "description": "Feature Type",
                                "type": "string",
                                "pattern": ""
                            },
                            "value": {
                                "description": "Feature value",
                                "type": [
                                    "string",
                                    "number",
                                    "boolean",
                                    "array",
                                    "object",
                                    "null"
                                ]
                            },
                            "source": {
                                "description": "Source name",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": ""
                            },
                            "created_at": {
                                "description": "Feature's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Feature's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Update a single Feature. [PATCH /profiles/{userName}/features/{featureId}]

Updates Feature's specific information.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + featureId: `3214` (number, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + name: Friend (string) - count  Feature name
        + value: 17 (string) - Feature value
        + type: 17 (string) - Feature type
        + source_id: 25367 (number) - Feature source_id

    + Body

            {
                "name": "Friend",
                "value": 17,
                "type": "integer",
                "source_id": 25367
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "PUT /profiles/{userName}/features/{featureSlug}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Settings response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Feature Id",
                                "type": "number",
                                "pattern": ""
                            },
                            "name": {
                                "description": "Feature Name",
                                "type": "string",
                                "pattern": ""
                            },
                            "creator": {
                                "description": "Feature Creator",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Service Name",
                                        "type": "string",
                                        "pattern": ""
                                    }
                                }
                            },
                            "type": {
                                "description": "Feature Type",
                                "type": "string",
                                "pattern": ""
                            },
                            "value": {
                                "description": "Feature value",
                                "type": [
                                    "string",
                                    "number",
                                    "boolean",
                                    "array",
                                    "object",
                                    "null"
                                ]
                            },
                            "source": {
                                "description": "Source name",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": ""
                            },
                            "created_at": {
                                "description": "Feature's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Feature's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Deletes a single Feature. [DELETE /profiles/{userName}/features/{featureId}]

Deletes a single Feature that belongs to the given user

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + featureId: `3214` (number, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /profiles/{userName}/features/{featureSlug}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    }
                },
                "required": [
                    "status"
                ]
            }

## Profile Flags. [/profiles/{userName}/flags]
Specific observations from the analysis of a profile are represented as Flags.
These can indicate recent name change, a mismatch of names in different profiles, etc.

## List all Flags. [GET /profiles/{userName}/flags{?page}]

Retrieve a complete list of all flags that belong to the given user.

+ Parameters
    + userName: `f67b96dcf96b49d713a520ce9f54053c` (string, required)
    + page: `10` (number, optional) - Current page
        + default: `1`

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/flags",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Flag response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "Flag id",
                                    "type": "integer"
                                },
                                "slug": {
                                    "description": "Slug that references a category",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9_-]+"
                                },
                                "attribute": {
                                    "description": "Flag attribute reference",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "created_at": {
                                    "description": "Flag's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Flag's last updated unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Create new Flag. [POST /profiles/{userName}/flags]

Create a new flag for the given user.

+ Parameters
    + userName: `f67b96dcf96b49d713a520ce9f54053c` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + slug: flag (string) - middle-name-mismatch Flag slug
        + attribute: middle-name (string) - Flag attribute

    + Body

            {
                "slug": "flag",
                "attribute": "middle-name"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /profiles/{userName}/flags",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Flag response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Flag id",
                                "type": "integer"
                            },
                            "slug": {
                                "description": "Slug that references a category",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "attribute": {
                                "description": "Flag attribute reference",
                                "type": "string",
                                "pattern": ""
                            },
                            "created_at": {
                                "description": "Flag's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Flag's last updated unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Deletes all flags. [DELETE /profiles/{userName}/flags]

Deletes all flags that belongs to the given user

+ Parameters
    + userName: `f67b96dcf96b49d713a520ce9f54053c` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /profiles/{userName}/flags",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "deleted": {
                        "description": "Number of sucessfully deleted flags",
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "status",
                    "deleted"
                ]
            }

## Retrieve a single Flag. [GET /profiles/{userName}/flags/{flagSlug}]

Retrieves all public information from a Flag.

+ Parameters
    + userName: `f67b96dcf96b49d713a520ce9f54053c` (string, required)
    + flagSlug: `flag-test` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/flags/{flagSlug}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Flag response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Flag id",
                                "type": "integer"
                            },
                            "slug": {
                                "description": "Slug that references a category",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "attribute": {
                                "description": "Flag attribute reference",
                                "type": "string",
                                "pattern": ""
                            },
                            "created_at": {
                                "description": "Flag's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Flag's last updated unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Deletes a single Flag. [DELETE /profiles/{userName}/flags/{flagSlug}]

Deletes a single Flag that belongs to the given user

+ Parameters
    + userName: `f67b96dcf96b49d713a520ce9f54053c` (string, required)
    + flagSlug: `flag-test` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /profiles/{userName}/flags/{flagSlug}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    }
                },
                "required": [
                    "status"
                ]
            }

## Profile Gates. [/profiles/{userName}/gates]
A Profile Gate is a criterion set by a Company who requires a yes-no answer for a specific, vital feature of a
Profile. For example if a Company requires Users to be over the age of 18, a Gate is used to filter out any User
not fulfilling this criterion. Multiple Gates can be used to create more specific criteria if needed.
For example if a Company requires Users to be over the age of 18 and living and in the USA, it would require 3
Gates, one for the age, one for employment and one for residency.

## List all Gates. [GET /profiles/{userName}/gates{?page}]

Retrieve a complete list of all gates that belong to the given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + page: `10` (number, optional) - Current page
        + default: `1`

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/gates",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Gates response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "Gate id",
                                    "type": "integer"
                                },
                                "name": {
                                    "description": "Gate's name",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9_-]+"
                                },
                                "slug": {
                                    "description": "Gate's slug",
                                    "type": "string",
                                    "pattern": "[a-zA-Z0-9_-]+"
                                },
                                "confidence_level": {
                                    "description": "Gate's confidence level",
                                    "type": "string",
                                    "pattern": "[a-zA-Z]+"
                                },
                                "created_at": {
                                    "description": "Gate's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Gate's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Create new Gate. [POST /profiles/{userName}/gates]

Create a new gate for the given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + name: 18+ (string) - Gate name
        + confidence_level: medium (string) - Gate confidence level

    + Body

            {
                "name": "18+",
                "confidence_level": "medium"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /profiles/{userName}/gates",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Feature response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Gate id",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Gate's name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "slug": {
                                "description": "Gate's slug",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "confidence_level": {
                                "description": "Gate's confidence level",
                                "type": "string",
                                "pattern": "[a-zA-Z]+"
                            },
                            "created_at": {
                                "description": "Gate's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Gate's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Deletes all gates. [DELETE /profiles/{userName}/gates]

Deletes all gates that belongs to the given user

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /profiles/{userName}/gates",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "deleted": {
                        "description": "Number of sucessfully deleted gates",
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "status",
                    "deleted"
                ]
            }

## Retrieve a single Gate. [GET /profiles/{userName}/gates/{gateSlug}]

Retrieves all public information from a Gate.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + gateSlug: `data-name` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/gates/{gateSlug}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Gate response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Gate id",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Gate's name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "slug": {
                                "description": "Gate's slug",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "confidence_level": {
                                "description": "Gate's confidence level",
                                "type": "string",
                                "pattern": "[a-zA-Z]+"
                            },
                            "created_at": {
                                "description": "Gate's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Gate's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Update a single Gate. [PATCH /profiles/{userName}/gates/{gateSlug}]

Updates Gate's specific information.
+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + gateSlug: `data-name` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + confidence_level: medium (string) - Gate confidence level

    + Body

            {
                "confidence_level": "medium"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "PUT /profiles/{userName}/gates/{gateSlug}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Gates response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Gate id",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Gate's name",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "slug": {
                                "description": "Gate's slug",
                                "type": "string",
                                "pattern": "[a-zA-Z0-9_-]+"
                            },
                            "confidence_level": {
                                "description": "Gate's confidence level",
                                "type": "string",
                                "pattern": "[a-zA-Z]+"
                            },
                            "created_at": {
                                "description": "Gate's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Gate's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Creates or updates a single Gate. [PUT /profiles/{userName}/gates/{gateSlug}]

Creates or updates gate's specific information.

Acting User: the user that is performing the system action
Target User: the user that is receiving the system action
Acting Company: the company that is performing the system action
Target Company: the company that is receiving the system action
Credential: the credential used during the request (may be missing)

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

## Deletes a single Gate. [DELETE /profiles/{userName}/gates/{gateSlug}]

Deletes a single Gate that belongs to the given user

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + gateSlug: `data-name` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /profiles/{userName}/gates/{gateSlug}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    }
                },
                "required": [
                    "status"
                ]
            }

## Profile Processes. [/profiles/{userName}/processes]
The Profile Process is the process the API uses in order to extract information from the raw data provided by the
User. This Process is broken up by the Services that perform Tasks.

**Note:** advanced usage only.

## List all Processes. [GET /profiles/{userName}/processes{?page}]

Retrieve a complete list of all processes that belong to the given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + page: `10` (number, optional) - Current page
        + default: `1`

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/features",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Features response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "Feature Id",
                                    "type": "number",
                                    "pattern": ""
                                },
                                "name": {
                                    "description": "Feature Name",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "creator": {
                                    "description": "Feature Creator",
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "description": "Service Name",
                                            "type": "string",
                                            "pattern": ""
                                        }
                                    }
                                },
                                "type": {
                                    "description": "Feature Type",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "value": {
                                    "description": "Feature value",
                                    "type": [
                                        "string",
                                        "number",
                                        "boolean",
                                        "array",
                                        "object",
                                        "null"
                                    ]
                                },
                                "source": {
                                    "description": "Source name",
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "pattern": ""
                                },
                                "created_at": {
                                    "description": "Feature's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Feature's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Retrieve a single Process. [GET /profiles/{userName}/processes/{processId}]

Retrieves all public information from a Process.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + processId: `3412` (number, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/features/{featureSlug}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Feature response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Feature Id",
                                "type": "number",
                                "pattern": ""
                            },
                            "name": {
                                "description": "Feature Name",
                                "type": "string",
                                "pattern": ""
                            },
                            "creator": {
                                "description": "Feature Creator",
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "Service Name",
                                        "type": "string",
                                        "pattern": ""
                                    }
                                }
                            },
                            "type": {
                                "description": "Feature Type",
                                "type": "string",
                                "pattern": ""
                            },
                            "value": {
                                "description": "Feature value",
                                "type": [
                                    "string",
                                    "number",
                                    "boolean",
                                    "array",
                                    "object",
                                    "null"
                                ]
                            },
                            "source": {
                                "description": "Source name",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": ""
                            },
                            "created_at": {
                                "description": "Feature's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Feature's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Profile Raw. [/profiles/{userName}/raw]
Profiles Raw is the raw data extracted from a Profile. This is what the API reads and extracts information in order
to process more complex requests.

**Note:** advanced usage only.

## List all raw source data. [GET /profiles/{userName}/raw{?collections}]

Retrieve a complete list of the raw data by a given source.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + collections: `collection1,collection2` (string, optional)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken|IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/sources/{sourceId}/raw",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Raw response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "collection": {
                                    "description": "Collection name of raw data",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "data": {
                                    "description": "Raw data",
                                    "type": "object"
                                },
                                "created_at": {
                                    "description": "Raw's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Raw's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Creates a new raw data. [POST /profiles/{userName}/raw]

Creates a new raw data for the given source.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + collection: collection-name (string) - Collection name
        + data: data-value (string) - Data

    + Body

            {
                "collection": "collection-name",
                "data": "data-value"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "https://api.idos.io/1.0/schema/member/memberEntity.json",
                "title": "Raw",
                "type": "object",
                "properties": {
                    "collection": {
                        "description": "Collection name of raw data",
                        "type": "string",
                        "pattern": ""
                    },
                    "data": {
                        "description": "Raw data",
                        "type": "object"
                    },
                    "created_at": {
                        "description": "Raw's creation unixtime",
                        "type": "integer"
                    },
                    "updated_at": {
                        "description": "Raw's last update unixtime",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "collection",
                    "data",
                    "created_at"
                ]
            }

## Deletes the raw data. [DELETE /profiles/{userName}/raw]

Deletes the raw data of the given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /profiles/{userName}/sources/{sourceId}/raw",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "deleted": {
                        "description": "Number of sucessfully deleted raws",
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "status",
                    "deleted"
                ]
            }

## Creates or updates raw data. [PUT /profiles/{userName}/raw]

Creates or update a raw data for the given source.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + collection: collection-name (string) - Collection name
        + data: data-value (string) - Data

    + Body

            {
                "collection": "collection-name",
                "data": "data-value"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "https://api.idos.io/1.0/schema/member/memberEntity.json",
                "title": "Raw",
                "type": "object",
                "properties": {
                    "collection": {
                        "description": "Collection name of raw data",
                        "type": "string",
                        "pattern": ""
                    },
                    "data": {
                        "description": "Raw data",
                        "type": "object"
                    },
                    "created_at": {
                        "description": "Raw's creation unixtime",
                        "type": "integer"
                    },
                    "updated_at": {
                        "description": "Raw's last update unixtime",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "collection",
                    "data",
                    "created_at"
                ]
            }

## Profile Recommendation. [/profiles/{userName}/recommendation]
Our recommendation gives guidance on whether the profile should be accepted for your service.
It is a binary true/false result, with a provided reason for that result. The recommendation
is based on a rule set created by us with the specifications you provided.

## Retrieve the profile recommendation. [GET /profiles/{userName}/recommendation]

Retrieves the profile recommendation calculated according to the ruleset specified by the company.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: UserToken|CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/recommendation",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Recommendation response payload",
                        "type": "object",
                        "properties": {
                            "result": {
                                "description": "Recommendation result",
                                "type": "string"
                            },
                            "passed": {
                                "description": "Rules that the profile passed",
                                "type": "array"
                            },
                            "failed": {
                                "description": "Rules that the profile failed to pass",
                                "type": "array"
                            },
                            "created_at": {
                                "description": "Recommendation's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Recommendation's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Create or update the profile recommendation. [PUT /profiles/{userName}/recommendation]

Creates or updates the profile recommendation.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: UserToken|CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + result: pass (string) - Recommendation result
        + passed: rules-passed (string) - The rules that the profile have passed
        + failed: rules-failed (string) - The rules that the profile have failed to pass

    + Body

            {
                "result": "pass",
                "passed": "rules-passed",
                "failed": "rules-failed"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "PUT /profiles/{userName}/recommendation",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Recommendation response payload",
                        "type": "object",
                        "properties": {
                            "result": {
                                "description": "Recommendation result",
                                "type": "string"
                            },
                            "passed": {
                                "description": "Rules that the profile passed",
                                "type": "array"
                            },
                            "failed": {
                                "description": "Rules that the profile failed to pass",
                                "type": "array"
                            },
                            "created_at": {
                                "description": "Recommendation's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Recommendation's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Profile References. [/profiles/{userName}/references]
The Profile References endpoint allows you to confirm authenticity of information you already have for a user.
You can submit reference data for the user and retrieve information on how well this matches to data processed
from other sources.

## List all reference data. [GET /profiles/{userName}/references{?names}]

Retrieve a complete list of the references by a given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + names: `firstName,middleName,lastName` (string, optional)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/reference",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Reference response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "name": {
                                    "description": "Reference name",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "value": {
                                    "description": "Reference value",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "created_at": {
                                    "description": "Reference's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Reference's last updated unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Creates a new reference. [POST /profiles/{userName}/references]

Creates a new reference for the given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + name: reference-name (string) - Reference name
        + value: reference-value (string) - Reference value

    + Body

            {
                "name": "reference-name",
                "value": "reference-value"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "https://api.idos.io/1.0/schema/reference/referenceEntity.json",
                "title": "Reference",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Reference name",
                        "type": "string",
                        "pattern": ""
                    },
                    "value": {
                        "description": "Reference value",
                        "type": "string",
                        "pattern": ""
                    },
                    "created_at": {
                        "description": "Reference's creation unixtime",
                        "type": "integer"
                    },
                    "updated_at": {
                        "description": "Reference's last updated unixtime",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "name",
                    "value",
                    "created_at"
                ]
            }

## Deletes all references. [DELETE /profiles/{userName}/references]

Deletes all references from the given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /profiles/{userName}/reference",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "deleted": {
                        "description": "Number of sucessfully deleted reference",
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "status",
                    "deleted"
                ]
            }

## Retrieves a reference. [GET /profiles/{userName}/references/{referenceName}]

Retrieves a reference from the given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + referenceName: `data-name` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "https://api.idos.io/1.0/schema/reference/referenceEntity.json",
                "title": "Reference",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Reference name",
                        "type": "string",
                        "pattern": ""
                    },
                    "value": {
                        "description": "Reference value",
                        "type": "string",
                        "pattern": ""
                    },
                    "created_at": {
                        "description": "Reference's creation unixtime",
                        "type": "integer"
                    },
                    "updated_at": {
                        "description": "Reference's last updated unixtime",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "name",
                    "value",
                    "created_at"
                ]
            }

## Update a reference. [PATCH /profiles/{userName}/references/{referenceName}]

Updates a reference for the given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + referenceName: `reference-name` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + value: reference-value (string) - Reference value

    + Body

            {
                "value": "reference-value"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "PUT /profiles/{userName}/references/{referenceName}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Reference response payload",
                        "type": "object",
                        "properties": {
                            "name": {
                                "description": "Reference name",
                                "type": "string",
                                "pattern": ""
                            },
                            "value": {
                                "description": "Reference value",
                                "type": "string",
                                "pattern": ""
                            },
                            "created_at": {
                                "description": "Reference's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Reference's last updated unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": [
                            "integer",
                            null
                        ]
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Deletes a reference. [DELETE /profiles/{userName}/references/{referenceName}]

Deletes a reference from the given user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + referenceName: `data-name` (string, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /profiles/{userName}/reference/{referenceName}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    }
                },
                "required": [
                    "status"
                ]
            }

## Profile Reviews. [/companies/{companySlug}/profiles/{userId}/reviews]
A Profile Review allows a Company to provide feedback on any Attributes the API has extracted that they feel is
inaccurate or incorrect. For example if the API has failed a Profile at an 18+ Gate, and later the User provides
evidence proving their age is 18+, the Company should use a Profile Review to flag this information as inaccurate
in order for Veridu to improve the accuracy of the API.

## List all reviews. [GET /companies/{companySlug}/profiles/{userId}/reviews]

Retrieve all reviews from a given user, matching one or more flags.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + userId: `1827452` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/reviews",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Reviews response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "positive": {
                                    "description": "Revies is positive",
                                    "type": "boolean"
                                },
                                "created_at": {
                                    "description": "Review's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Review's last updated unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Creates a new review. [POST /companies/{companySlug}/profiles/{userId}/reviews]

Creates a new review for the given user.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + userId: `1827452` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + gate_id: 157896 (number) - Review gate_id
        + positive: true (boolean) - Review positive

    + Body

            {
                "gate_id": 157896,
                "positive": "true"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /profiles/{userName}/reviews",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Review response payload",
                        "type": "object",
                        "properties": {
                            "positive": {
                                "description": "Revies is positive",
                                "type": "boolean"
                            },
                            "created_at": {
                                "description": "Review's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Review's last updated unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Create or update a review. [PUT /companies/{companySlug}/profiles/{userId}/reviews]

Creates or updates a new review for the given user.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + userId: `1827452` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + gate_id: 1 (number)
        + positive: false (boolean)

    + Body

            {
                "gate_id": 1,
                "positive": "false"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "PUT /profiles/{userName}/reviews",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Review response payload",
                        "type": "object",
                        "properties": {
                            "positive": {
                                "description": "Revies is positive",
                                "type": "boolean"
                            },
                            "created_at": {
                                "description": "Review's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Review's last updated unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Retrieves a review. [GET /companies/{companySlug}/profiles/{userId}/reviews/{reviewId}]

Retrieves a review from the given user.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + userId: `1827452` (number, required)
    + reviewId: `21494` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/reviews/{reviewId}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Feature response payload",
                        "type": "object",
                        "properties": {
                            "positive": {
                                "description": "Revies is positive",
                                "type": "boolean"
                            },
                            "created_at": {
                                "description": "Review's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Review's last updated unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Update a review. [PATCH /companies/{companySlug}/profiles/{userId}/reviews/{reviewId}]

Updates a review for the given user and reference.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + userId: `1827452` (number, required)
    + reviewId: `21494` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + positive: false (boolean)

    + Body

            {
                "positive": "false"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "PUT /profiles/{userName}/reviews/{reviewId}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Service response payload",
                        "type": "object",
                        "properties": {
                            "positive": {
                                "description": "Revies is positive",
                                "type": "boolean"
                            },
                            "created_at": {
                                "description": "Review's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Review's last updated unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Profile Sources. [/profiles/{userName}/sources]
A Profile Source is the online platform from which the API is accessing a user's information (eg. Facebook,
Twitter, LinkedIn, etc.). You can associate one or more Profile Sources to each user.

## List all Sources. [GET /profiles/{userName}/sources{?after,before,page}]

Retrieves a complete list of all sources that belong to the requesting user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + after: `2016-01-01` (string, optional) - Initial Company creation date (lower bound)
        + default: `1070-01-01`
    + before: `2016-01-31` (string, optional) - Final Company creation date (upper bound)
        + default: `2016-12-31`
    + page: `10` (number, optional) - Current page
        + default: `1`

+ Request (application/json)
    + Headers

            Authorization: UserToken|CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /sources/{userName}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Source response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "Source id",
                                    "type": "integer"
                                },
                                "name": {
                                    "description": "Source Name",
                                    "type": "string",
                                    "pattern": "[a-z]+"
                                },
                                "tags": {
                                    "description": "Source information tags",
                                    "type": [
                                        "object",
                                        "null"
                                    ],
                                    "minItems": 0,
                                    "uniqueItems": true
                                },
                                "created_at": {
                                    "description": "Source's creation unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Create new Source. [POST /profiles/{userName}/sources]

Creates a new source for the requesting user.

All source related data is packed on TAGS payload field.
- oAuth 1.x should carry `access_token` and `token_secret`.
- oAuth 2.x should carry `access_token` and optionally `token_refresh`.
- E-mail should carry `email_address` and can optionally an `otp_check` flag for OTP verification.
- Phone should carry `phone_number`, `country_code` and optionally an `otp_check` flag for OTP verification.
- Submitted can carry as many fields as wanted and optionally a `cra_check` flag for CRA verification.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: UserToken|CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + name: twitter (string) - Source name
        + tags: {"otp_check": (string) - "email"} Source's new tags

    + Body

            {
                "name": "twitter",
                "tags": "{\"otp_check\":"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /sources/{userName}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Source response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Source id",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Source Name",
                                "type": "string",
                                "pattern": "[a-z]+"
                            },
                            "tags": {
                                "description": "Source information tags",
                                "type": [
                                    "object",
                                    "null"
                                ],
                                "minItems": 0,
                                "uniqueItems": true
                            },
                            "created_at": {
                                "description": "Source's creation unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Deletes all Sources. [DELETE /profiles/{userName}/sources]

Delete all sources that belong to the target user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: UserToken|CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /service",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "deleted": {
                        "description": "Number of sucessfully deleted services",
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "status",
                    "deleted"
                ]
            }

## Retrieve a single Source. [GET /profiles/{userName}/sources/{sourceId}]

Retrieves all information from a Source.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + sourceId: `12345` (number, required)

+ Request (application/json)
    + Headers

            Authorization: UserToken|CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /sources/{userName}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Source response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Source id",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Source Name",
                                "type": "string",
                                "pattern": "[a-z]+"
                            },
                            "tags": {
                                "description": "Source information tags",
                                "type": [
                                    "object",
                                    "null"
                                ],
                                "minItems": 0,
                                "uniqueItems": true
                            },
                            "created_at": {
                                "description": "Source's creation unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Update a single Source. [PATCH /profiles/{userName}/sources/{sourceId}]

Updates a Source's specific information.

All source related data is packed on TAGS payload field.
- E-mail can carry an `otp_check` flag for OTP verification.
- SMS can carry an `otp_check` flag for OTP verification.
- Submitted can carry a `cra_check` flag for CRA verification.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + sourceId: `12345` (number, required)

+ Request (application/json)
    + Headers

            Authorization: UserToken|CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + otpCode: OTP (string) - Code check for One Time Password Verifications
        + tags: {"otp_check": (string) - "email"} Source's new tags

    + Body

            {
                "otpCode": "OTP",
                "tags": "{\"otp_check\":"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /sources/{userName}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Source response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Source id",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Source Name",
                                "type": "string",
                                "pattern": "[a-z]+"
                            },
                            "tags": {
                                "description": "Source information tags",
                                "type": [
                                    "object",
                                    "null"
                                ],
                                "minItems": 0,
                                "uniqueItems": true
                            },
                            "created_at": {
                                "description": "Source's creation unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Deletes a single Source. [DELETE /profiles/{userName}/sources/{sourceId}]

Deletes a source from the target user.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)
    + sourceId: `12345` (number, required)

+ Request (application/json)
    + Headers

            Authorization: UserToken|CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /profiles/{userName}/sources/{sourceId}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    }
                },
                "required": [
                    "status"
                ]
            }

## Profile Tags. [/companies/{companySlug}/profiles/{userId}/tags]
A Profile tag is used by a Company to categorise and organise certain Profiles for the purposes of improving
management of large numbers of Users and data. A Company will use Profile Tags in order to create specific
categories of Profiles for Members to easily assign or view.

## List all Tags. [GET /companies/{companySlug}/profiles/{userId}/tags]

Retrieve a complete list of all tags that belong to the requesting user.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + userId: `1827452` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/tags",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Tag response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "name": {
                                    "description": "Tag name",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "slug": {
                                    "description": "Tag slug",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "created_at": {
                                    "description": "Tag's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Tag's last update unixtime",
                                    "type": [
                                        "integer",
                                        null
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": [
                            "integer",
                            null
                        ]
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Creates new Tag. [POST /companies/{companySlug}/profiles/{userId}/tags]

Creates a new tag for the requesting user.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + userId: `1827452` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + name: Test (string) - Tag name
        + slug: test-tag (string) - Tag slug

    + Body

            {
                "name": "Test",
                "slug": "test-tag"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "https://api.idos.io/1.0/schema/tag/tagEntity.json",
                "title": "Tag",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Tag name",
                        "type": "string",
                        "pattern": ""
                    },
                    "slug": {
                        "description": "Tag slug",
                        "type": "string",
                        "pattern": ""
                    },
                    "created_at": {
                        "description": "Tag's creation unixtime",
                        "type": "integer"
                    },
                    "updated_at": {
                        "description": "Tag's last update unixtime",
                        "type": [
                            "integer",
                            null
                        ]
                    }
                },
                "required": [
                    "name",
                    "slug",
                    "created_at"
                ]
            }

## Delete All Tags. [DELETE /companies/{companySlug}/profiles/{userId}/tags]

Delete all tags that belong to the requesting user.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + userId: `1827452` (number, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /profiles/{userName}/tags",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "deleted": {
                        "description": "Number of sucessfully deleted tags",
                        "type": "integer",
                        "minimum": 0
                    }
                },
                "required": [
                    "status",
                    "deleted"
                ]
            }

## Retrieve a single Tag. [GET /companies/{companySlug}/profiles/{userId}/tags/{tagSlug}]

Retrieves all public information from a Tag

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + userId: `1827452` (number, required)
    + tagSlug: `tag-test` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "id": "https://api.idos.io/1.0/schema/tag/tagEntity.json",
                "title": "Tag",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Tag name",
                        "type": "string",
                        "pattern": ""
                    },
                    "slug": {
                        "description": "Tag slug",
                        "type": "string",
                        "pattern": ""
                    },
                    "created_at": {
                        "description": "Tag's creation unixtime",
                        "type": "integer"
                    },
                    "updated_at": {
                        "description": "Tag's last update unixtime",
                        "type": [
                            "integer",
                            null
                        ]
                    }
                },
                "required": [
                    "name",
                    "slug",
                    "created_at"
                ]
            }

## Deletes a single Tag. [DELETE /companies/{companySlug}/profiles/{userId}/tags/{tagSlug}]

Deletes a single Tag that belongs to the requesting user.

+ Parameters
    + companySlug: `veridu-ltd` (string, required)
    + userId: `1827452` (number, required)
    + tagSlug: `tag-test` (string, required)

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "DELETE /profiles/{userName}/tags/{tagName}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    }
                },
                "required": [
                    "status"
                ]
            }

## Profile Tasks. [/profiles/{userName}/processes/{processId}/tasks]
A Profile Task is a request a Service makes to the API to extract and provide specific information from the Raw data.

**Note:** advanced usage only.

## Create new Task. [POST /profiles/{userName}/processes/{processId}/tasks]

Create a new task for the given process.

+ Parameters
    + userName: `f67b96dcf96b49d713a520ce9f54053c` (string, required)
    + processId: `1325` (number, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + name: Task (string) - test Task name
        + event: user:created (string) - Task event
        + running: false (boolean) - Task running flag
        + success: true (boolean) - Task success flag
        + message: xyz (string) - Task message

    + Body

            {
                "name": "Task",
                "event": "user:created",
                "running": "false",
                "success": "true",
                "message": "xyz"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /profiles/{userName}/processes/{processId}/tasks",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Task response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Task Id",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Task Name",
                                "type": "string",
                                "pattern": ""
                            },
                            "event": {
                                "description": "Event that triggered the task",
                                "type": "string",
                                "pattern": ""
                            },
                            "running": {
                                "description": "Task running flag",
                                "type": "boolean"
                            },
                            "success": {
                                "description": "Task success flag",
                                "type": [
                                    "boolean",
                                    "null"
                                ]
                            },
                            "created_at": {
                                "description": "Task's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Task's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## List all tasks. [GET /profiles/{userName}/processes/{processId}/tasks{?page}]

Retrieve a complete list of all tasks that belong to the given user.

+ Parameters
    + userName: `f67b96dcf96b49d713a520ce9f54053c` (string, required)
    + processId: `1325` (number, required)
    + page: `10` (number, optional) - Current page
        + default: `1`

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/processes/{processId}/tasks",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Tasks response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "Task Id",
                                    "type": "integer"
                                },
                                "name": {
                                    "description": "Task Name",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "event": {
                                    "description": "Event that triggered the task",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "running": {
                                    "description": "Task running flag",
                                    "type": "boolean"
                                },
                                "success": {
                                    "description": "Task success flag",
                                    "type": [
                                        "boolean",
                                        "null"
                                    ]
                                },
                                "created_at": {
                                    "description": "Task's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Task's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Retrieve a single Task. [GET /profiles/{userName}/processes/{processId}/tasks/{taskId}]

Retrieves all public information from a Task.

+ Parameters
    + userName: `f67b96dcf96b49d713a520ce9f54053c` (string, required)
    + processId: `1325` (number, required)
    + taskId: `1` (number, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}/processes/{processId}/tasks/{taskId}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Task response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Task Id",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Task Name",
                                "type": "string",
                                "pattern": ""
                            },
                            "event": {
                                "description": "Event that triggered the task",
                                "type": "string",
                                "pattern": ""
                            },
                            "running": {
                                "description": "Task running flag",
                                "type": "boolean"
                            },
                            "success": {
                                "description": "Task success flag",
                                "type": [
                                    "boolean",
                                    "null"
                                ]
                            },
                            "created_at": {
                                "description": "Task's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Task's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": [
                            "integer",
                            "null"
                        ]
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Update a single Task. [PATCH /profiles/{userName}/processes/{processId}/tasks/{taskId}]

Updates Task's specific information.

+ Parameters
    + userName: `f67b96dcf96b49d713a520ce9f54053c` (string, required)
    + processId: `1325` (number, required)
    + taskId: `1` (number, required)

+ Request (application/json)
    + Headers

            Authorization: CredentialToken wqxehuwqwsthwosjbxwwsqwsdi

    + Attributes

        + running: false (boolean) - Task running flag
        + success: true (boolean) - Task success flag
        + message: xyz (string) - Task message

    + Body

            {
                "running": "false",
                "success": "true",
                "message": "xyz"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "PUT /profiles/{userName}/processes/{processId}/tasks/{taskId}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Settings response payload",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Task Id",
                                "type": "integer"
                            },
                            "name": {
                                "description": "Task Name",
                                "type": "string",
                                "pattern": ""
                            },
                            "event": {
                                "description": "Event that triggered the task",
                                "type": "string",
                                "pattern": ""
                            },
                            "running": {
                                "description": "Task running flag",
                                "type": "boolean"
                            },
                            "success": {
                                "description": "Task success flag",
                                "type": [
                                    "boolean",
                                    "null"
                                ]
                            },
                            "created_at": {
                                "description": "Task's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Task's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }

## Profile. [/profiles/{userName}]
The User Profile is all of the data the API has collated from the Raw Data of one User.
It contains all of the data points about this User (eg. Attributes, Candidates, Features, Gates,
Flags, etc.) and all of their results. This is used to retrieve the complete information about one User
once it has been processed by the API.

## Retrieve all information of a single profile. [GET /profiles/{userName}]

Retrieve all profile candidates, attributes, gates and flags.

+ Parameters
    + userName: `9fd9f63e0d6487537569075da85a0c7f2` (string, required)

+ Request (application/json)
    + Headers

            Authorization: UserToken eyJ0eXAiOiJKV1QiLCJhbGciOiJIU

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /profiles/{userName}",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Profile response payload",
                        "type": "object",
                        "properties": {
                            "username": {
                                "description": "Profile's username",
                                "type": "string",
                                "pattern": ""
                            },
                            "attributes": {
                                "description": "List of profile attributes",
                                "type": "array",
                                "items": {
                                    "properties": {
                                        "name": {
                                            "description": "Attribute name",
                                            "type": "string",
                                            "pattern": ""
                                        },
                                        "value": {
                                            "description": "Attribute value",
                                            "type": "string",
                                            "pattern": ""
                                        },
                                        "created_at": {
                                            "description": "Attribute's creation unixtime",
                                            "type": "integer"
                                        },
                                        "updated_at": {
                                            "description": "Attribute's last update unixtime",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    }
                                },
                                "minItems": 0,
                                "uniqueItems": true
                            },
                            "candidates": {
                                "description": "List of attribute candidates",
                                "type": "array",
                                "items": {
                                    "properties": {
                                        "attribute": {
                                            "description": "Attribute name",
                                            "type": "string",
                                            "pattern": ""
                                        },
                                        "value": {
                                            "description": "Candidate value",
                                            "type": "string",
                                            "pattern": ""
                                        },
                                        "support": {
                                            "description": "Support score",
                                            "type": "number",
                                            "minimum": 0,
                                            "maximum": 1
                                        },
                                        "created_at": {
                                            "description": "Candidate's creation unixtime",
                                            "type": "integer"
                                        },
                                        "updated_at": {
                                            "description": "Candidate's last update unixtime",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    }
                                },
                                "minItems": 0,
                                "uniqueItems": true
                            },
                            "scores": {
                                "description": "List of attribute scores",
                                "type": "array",
                                "items": {
                                    "properties": {
                                        "creator": {
                                            "description": "Score Creator",
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "description": "Service Name",
                                                    "type": "string",
                                                    "pattern": ""
                                                }
                                            }
                                        },
                                        "attribute": {
                                            "description": "Score attribute name",
                                            "type": "string",
                                            "pattern": "[a-zA-Z0-9-_]"
                                        },
                                        "name": {
                                            "description": "Score name",
                                            "type": "string",
                                            "pattern": "[a-zA-Z0-9-_]"
                                        },
                                        "value": {
                                            "description": "Score value",
                                            "type": "number"
                                        },
                                        "created_at": {
                                            "description": "Score's creation unixtime",
                                            "type": "integer"
                                        },
                                        "updated_at": {
                                            "description": "Score's last update unixtime",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    }
                                },
                                "minItems": 0,
                                "uniqueItems": true
                            },
                            "gates": {
                                "description": "List of profile gates",
                                "type": "array",
                                "items": {
                                    "properties": {
                                        "id": {
                                            "description": "Gate id",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "Gate's name",
                                            "type": "string",
                                            "pattern": "[a-zA-Z0-9_-]+"
                                        },
                                        "slug": {
                                            "description": "Gate's slug",
                                            "type": "string",
                                            "pattern": "[a-zA-Z0-9_-]+"
                                        },
                                        "confidence_level": {
                                            "description": "Gate's confidence level",
                                            "type": "string",
                                            "pattern": "[a-zA-Z]+"
                                        },
                                        "created_at": {
                                            "description": "Gate's creation unixtime",
                                            "type": "integer"
                                        },
                                        "updated_at": {
                                            "description": "Gate's last update unixtime",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    }
                                },
                                "minItems": 0,
                                "uniqueItems": true
                            },
                            "sources": {
                                "description": "List of profile sources",
                                "type": "array",
                                "items": {
                                    "properties": {
                                        "id": {
                                            "description": "Source id",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "Source Name",
                                            "type": "string",
                                            "pattern": "[a-z]+"
                                        },
                                        "tags": {
                                            "description": "Source information tags",
                                            "type": [
                                                "object",
                                                "null"
                                            ],
                                            "minItems": 0,
                                            "uniqueItems": true
                                        },
                                        "created_at": {
                                            "description": "Source's creation unixtime",
                                            "type": [
                                                "integer",
                                                "null"
                                            ]
                                        }
                                    }
                                },
                                "minItems": 0,
                                "uniqueItems": true
                            },
                            "created_at": {
                                "description": "Profile's creation unixtime",
                                "type": "integer"
                            },
                            "updated_at": {
                                "description": "Profile's last update unixtime",
                                "type": [
                                    "integer",
                                    "null"
                                ]
                            }
                        }
                    },
                    "updated": {
                        "description": "Unixtime of the last update",
                        "type": "integer"
                    }
                },
                "required": [
                    "status",
                    "data",
                    "updated"
                ]
            }


# Group Metrics
## Metrics. [/metrics/system]
Metrics is what the API uses to document its activity when it is in operation.
It also gathers information about how the User interacts with the API when they make a verification.
This is used for collecting data on the verification process for analysing trends or creating visualisations.

## List all system metrics. [GET /metrics/system{?from,to,interval}]

Retrieve a complete list of the system metrics.

+ Parameters
    + from: `1449280800` (number, optional) - Initial metric date timestamp in number of seconds (lower bound)
    + to: `1449480800` (number, optional) - Final metric date timestamp in number of seconds (upper bound)
    + interval: `hourly` (string, optional) - The interval which the measurements were made
        + default: `daily`

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /metrics/system",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "System response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "endpoint": {
                                    "description": "Endpoint name",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "action": {
                                    "description": "Recorded action",
                                    "type": "string",
                                    "pattern": ""
                                },
                                "count": {
                                    "description": "Number of users",
                                    "type": "integer",
                                    "pattern": ""
                                },
                                "data": {
                                    "description": "Data for the recorded action",
                                    "type": "object"
                                },
                                "created_at": {
                                    "description": "Metric's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Metric's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## List all user metrics. [GET /metrics/user{?from,to,interval}]

Retrieve a complete list of the user metrics.

+ Parameters
    + from: `1449280800` (number, optional) - Initial metric date timestamp in number of seconds (lower bound)
    + to: `1449480800` (number, optional) - Final metric date timestamp in number of seconds (upper bound)
    + interval: `hourly` (string, optional) - The interval which the measurements were made
        + default: `daily`

+ Request (application/json)
    + Headers

            Authorization: IdentityToken wqxehuwqwsthwosjbxwwsqwsdi

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /metrics/user",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "User response payload",
                        "type": "array",
                        "items": {
                            "properties": {
                                "sources": {
                                    "description": "List of sources used for verification",
                                    "type": "object"
                                },
                                "data": {
                                    "description": "User data (this does not include PII)",
                                    "type": "object"
                                },
                                "gates": {
                                    "description": "List of gates passed associated with its corresponding attribute",
                                    "type": "object"
                                },
                                "flags": {
                                    "description": "List of flags raised",
                                    "type": "object"
                                },
                                "count": {
                                    "description": "Number of users",
                                    "type": "integer",
                                    "pattern": ""
                                },
                                "created_at": {
                                    "description": "Metric's creation unixtime",
                                    "type": "integer"
                                },
                                "updated_at": {
                                    "description": "Metric's last update unixtime",
                                    "type": [
                                        "integer",
                                        "null"
                                    ]
                                }
                            }
                        },
                        "minItems": 0,
                        "uniqueItems": true
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }


# Group SSO
## Profile SSO. [/sso]
Profile SSO is the "Single Sign-On" service that a User can use to easily authenticate themselves across multiple
platforms using the Veridu service, without having to use/create new login credentials for each platform.

## List all Sso providers. [GET /sso{?page}]

Retrieve a complete list of all sso providers.

+ Parameters
    + page: `10` (number, optional) - Current page
        + default: `1`

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /sso",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Sso response payload",
                        "type": "array"
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Create new SSO. [POST /sso]

Create a new sso.

+ Request (application/json)
    + Attributes

        + provider: twitter (string) - Provider name (one of: amazon, dropbox, facebook, google, linkedin, paypal, spotify, twitter or yahoo)
        + access_token: abc (string) - Provider access token (oAuth 1.x and 2.x)
        + credential: wxz (string) - Credential public key.
        + token_secret: def (string) - Profiver token secret (oAuth 1.x)
        + signup_hash: zyd (string) - A signup hash (Dashboard login)

    + Body

            {
                "provider": "twitter",
                "access_token": "abc",
                "credential": "wxz",
                "token_secret": "def",
                "signup_hash": "zyd"
            }

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 201 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "POST /sso",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Sso response payload",
                        "type": "object",
                        "properties": {
                            "username": {
                                "type": "string",
                                "format": "[a-zA-Z0-9_-]+"
                            },
                            "user_token": {
                                "type": "string"
                            },
                            "identity_token": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "username",
                            "user_token"
                        ]
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

## Retrieves the status of a sso provider. [GET /sso/{providerName}]



+ Parameters
    + providerName: `facebook` (string, required)

+ Response 500 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "Error",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "",
                        "type": "boolean"
                    },
                    "error": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "description": "Same as the HTTP Status Code.",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of error returned.",
                                "type": "string",
                                "pattern": ""
                            },
                            "link": {
                                "description": "Link to additional information about the error and how to fix/avoid it.",
                                "type": "string",
                                "pattern": ""
                            },
                            "message": {
                                "description": "A descriptive error message.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "status",
                    "error"
                ]
            }

+ Response 200 (application/json)

    + Schema

            {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "GET /sso",
                "type": "object",
                "properties": {
                    "status": {
                        "description": "Response status flag",
                        "type": "boolean"
                    },
                    "data": {
                        "description": "Sso response payload",
                        "type": "object"
                    }
                },
                "required": [
                    "status",
                    "data"
                ]
            }

